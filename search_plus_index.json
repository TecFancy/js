{"./":{"url":"./","title":"介绍","keywords":"","body":"JavaScript 中文版文档 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/INTRO.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/INTRO.html\"});gitalk.render(\"gitalk-container\"); "},"Global_Objects/":{"url":"Global_Objects/","title":"标准内置对象","keywords":"","body":"JavaScript 标准内置对象 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/README.html\"});gitalk.render(\"gitalk-container\"); "},"Global_Objects/Array/":{"url":"Global_Objects/Array/","title":"Array","keywords":"","body":"Array 特征 JavaScript 的数组具有以下特征： 数组元素可以是任意数据类型 比如，可以用数组的第一个位置保存字符串，第二个位置保存数组，第三个位置来保存对象，以此类推。 数组大小可动态调整 数组长度随着数据的添加可自动增长，以容纳新数据。 创建数组的方式 有两种方式创建数组，第一种是用 Array 构造函数创建数组，第二种是使用数组字面量表示法。 new Array(element0, element1[, ...[, elementN]]) new Array(arrayLength) Array(element0, element1[, ...[, elementN]]) Array(arrayLength) [element0, element1, ..., elementN] Array 构造函数 new 操作符后跟 Array 构造函数，即可创建一个数组。下面代码创建了一个长度为 0 的数组 colors。 const colors = new Array(); // 构造函数中不传参会创建长度为 0 的数组 若 Array 构造函数的参数是一个数字，会创建指定长度的数组。比如，下面创建一个长度为 3 的数组 arr。在创建数组 arr 时，只指定了数组的长度，没有指定数组要保存的内容，所以数组 arr 中 3 个元素的值都为 undefined。 const arr = new Array(3); console.log(arr); // expected output: Array [ ] // arr[0]: undefined; arr[1]: undefined; arr[2]: undefined; 如果 Array 构造函数的参数类型为除数字类型以外的其他任何类型，则会创建包含这些参数值的数组。下面代码创建了包含 3 个字符串值的数组： const names = new Array('Olive', 'Jack', 'Amy'); console.log(names); // expected output: Array ['Olive', 'Jack', 'Amy'] 在使用 Array 构造函数创建数组时，也可以省略前面的 new 操作符： const classmates = Array('Amy', 'Tony'); 数组字面量表示法 在实际开发中，数组字面量表示法更常用。数组字面量是由一对包含数组元素的方括号表示，数组元素之间以英文逗号(,)分割。下面代码创建了一个包含 3 个字符串值的数组： const colors = ['red', 'green', 'blue']; 读取和设置数组的值 通过方括号语法来访问和设置数组的值。 const colors = ['red', 'green', 'gray']; // 定义一个包含 3 个字符串值的数组 console.log(colors[0]); // 输出：'red' colors[2] = 'yellow'; // 修改第三项 colors[3] = 'black'; // 新增第四项 方括号中的索引代表要访问的值。如果索引值小于数组的长度，则返回对应项的值，就像上面代码中 colors[0] 会显示 'red' 一样。设置数组中某一项的值，也是使用方括号语法，这时会替换掉指定位置的值，上面代码中的 colors[2] = 'yellow'; 便把数组的第三项替换为了字符串 'yellow'。如果索引值大于数组的长度，数组就会自动增加到该索引值加 1 的长度，代码中 colors[3] = 'black'; 索引值是 3，数组长度就是 4，因此会新增数组的第四项，第四项的值是字符串 'black'。 检测数组 要准确的检测数组，请使用 Array.isArray() 方法。 数组属性 Array.length Array 构造函数的属性，其值为 1。该属性为静态属性，不是数组实例的 length 属性。 Array.prototype 通过数组的原型对象可以为所有数组对象添加属性。 数组方法 Array.from() 从类数组对象或可迭代对象中创建一个新的数组实例。 Array.isArray() 用来判断某个变量是否是一个数组对象。 Array.of() 根据一组参数来创建新的数组实例，支持任意的参数数量和类型。 数组实例的属性和方法 所有数组实例都会从 Array.prototype 继承属性和方法。修改 Array 的原型会影响所有数组实例。 属性 Array.prototype.constructor 所有数组实例都继承了这个属性，它的值就是 Array，表明所有数组都是由 Array 构造出来的。 Array.prototype.length 因为 Array.prototype 也是个数组，而且它是一个空数组，所以 Array.prototype.length 值为 0。 方法 按照功能，Array 数组实例的方法可分为：修改器方法、访问方法和迭代方法。 修改器方法 下面这些方法会改变调用它们的对象自身的值： Array.prototype.copyWithin() Array.prototype.fill() Array.prototype.pop() Array.prototype.push() Array.prototype.reverse() Array.prototype.shift() Array.prototype.sort() Array.prototype.splice() Array.prototyp.unshift() 访问方法 下面这些方法绝对不会改变调用它们的对象自身的值，只会返回一个新的数组或返回一个其他的期望值。 Array.prototype.concat() Array.prototype.includes() Array.prototype.join() Array.prototype.slice() Array.prototype.toString() Array.prototype.toLocaleString() Array.prototype.indexOf() Array.prototype.lastIndexOf() 迭代方法 Array.prototype.forEach() Array.prototype.entries() Array.prototype.every() Array.prototype.some() Array.prototype.filter() Array.prototype.find() Array.prototype.findIndex() Array.prototype.keys() Array.prototype.map() Array.prototype.reduce() Array.prototype.reduceRight() Array.prototype.values() window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/Array/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/Array/README.html\"});gitalk.render(\"gitalk-container\"); "},"Global_Objects/Array/isArray.html":{"url":"Global_Objects/Array/isArray.html","title":"Array.isArray()","keywords":"","body":"Array.isArray() Array.isArray() 用于确定传递的值是否是一个 Array。 Array.isArray([1, 2, 3]); // true Array.isArray({name: 'Olive'}); // false Array.isArray('baseball'); // false Array.isArray(undefined); // false 语法 Array.isArray(value) 参数 value - 需要检测的值。 返回值 如果被检测的值是 Array 则返回 true，否则返回 false。 相关链接 Array window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/Array/isArray.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/Array/isArray.html\"});gitalk.render(\"gitalk-container\"); "},"Global_Objects/Array/pop.html":{"url":"Global_Objects/Array/pop.html","title":"Array.prototype.pop()","keywords":"","body":"Array.prototype.pop() pop() 方法从数组中删除最后一个元素，并返回被删除的元素。该方法会改变数组的长度。 const colors = ['red', 'green', 'white']; console.log(colors.pop()); // expected output: 'white' console.log(colors); // expected output: Array ['red', 'green'] colors.pop(); console.log(colors); // expected output: Array ['red'] 语法 arr.pop() 返回值 从数组中删除的最后一个元素（当数组为空时，返回 undefined）。 描述 pop() 方法从一个数组中删除并返回最后一个元素。 pop() 方法会根据 length 属性来确定数组尾部元素的位置。如果不包含 length 属性或 length 属性不能被转换成一个数值，会将 length 置为 0，并返回 undefined。 在一个空数组上调用 pop() 方法返回 undefined。 示例 下面代码首先创建了一个包含 4 个字符串元素的数组 colors，随后删掉它最后一个元素。 const colors = ['red', 'green', 'blue', 'white']; const popped = colors.pop(); // colors: ['red', 'green', 'blue'] // popped: 'white' 相关链接 Array.prototype.push() Array.prototype.shift() Array.prototype.unshift() Array.prototype.concat() Array.prototype.splice() window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/Array/pop.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/Array/pop.html\"});gitalk.render(\"gitalk-container\"); "},"Global_Objects/Array/push.html":{"url":"Global_Objects/Array/push.html","title":"Array.prototype.push()","keywords":"","body":"Array.prototype.push() push() 方法将一个或多个元素添加到数组末尾，并返回该数组的新长度。 const colors = ['red', 'green', 'white']; const count = colors.push('black'); console.log(count); // expected output: 4 console.log(colors); // expected output: Array ['red', 'green', 'white', 'black'] colors.push('gray', 'blue', 'yellow'); console.log(colors); // expected output: ['red', 'green', 'white', 'black', 'gray', 'blue', 'yellow'] 语法 arr.push(element1, element2, ..., elementN) 参数 elementN 被添加到数组末尾的元素。 返回值 返回新的 length 属性值。 示例 添加元素到数组 下面代码创建了一个包含 2 个字符串元素的数组，随后在它尾部追加了 2 个字符串元素。total 变量是数组的新长度值。 const sports = ['soccer', 'baseball']; const total = sports.push('football', 'swimming'); console.log(sports); // expected output: Array ['soccer', 'baseball', 'football', 'swimming'] console.log(total); // expected output: 4 相关链接 Array.prototype.pop() Array.prototype.shift() Array.prototype.unshift() Array.prototype.concat() window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/Array/push.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Global_Objects/Array/push.html\"});gitalk.render(\"gitalk-container\"); "},"Operators/":{"url":"Operators/","title":"表达式和运算符","keywords":"","body":"JavaScript 表达式和运算符 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Operators/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Operators/README.html\"});gitalk.render(\"gitalk-container\"); "},"Statements/":{"url":"Statements/","title":"语句和运算符","keywords":"","body":"JavaScript 语句和声明 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Statements/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Statements/README.html\"});gitalk.render(\"gitalk-container\"); "},"Functions/":{"url":"Functions/","title":"函数","keywords":"","body":"JavaScript 函数 window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Functions/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Functions/README.html\"});gitalk.render(\"gitalk-container\"); "},"Class_elements/":{"url":"Class_elements/","title":"Classes","keywords":"","body":"Classes window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Class_elements/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Class_elements/README.html\"});gitalk.render(\"gitalk-container\"); "},"Errors/":{"url":"Errors/","title":"Errors","keywords":"","body":"Errors window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Errors/README.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/Errors/README.html\"});gitalk.render(\"gitalk-container\"); "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"window.onload = function() {gitbook.events.on(\"page.change\", function() {var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/GLOSSARY.html\"});gitalk.render(\"gitalk-container\");});};var gitalk = new Gitalk({\"clientID\":\"c1d05fd6ca9343bb16f9\",\"clientSecret\":\"bfaab40c3dda131947f4694bbe6ea09b08c1db4a\",\"repo\":\"js.ruofei.site.gitalk\",\"owner\":\"smpower\",\"admin\":[\"smpower\"],\"id\":\"/GLOSSARY.html\"});gitalk.render(\"gitalk-container\"); "}}